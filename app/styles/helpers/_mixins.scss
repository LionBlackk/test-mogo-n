@mixin size($width, $height: $width){
  width: $width;
  height: $height;
}

@mixin absoluteCenter($direction: "left", $position: absolute){
  position: $position;
  @if $direction == "left"{
    left: 50%;
    transform: translateX(-50%);
  }
  @if($direction == "top"){
    top: 50%;
    transform: translateY(-50%);
  }  
  @if($direction == "both"){
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
  }
}

@mixin bg($color : red){
  background-color: $color;
}

@mixin flexbox($align: flex-start, $justify: flex-start, $direction: row, $wrap: nowrap){
  display: flex;
  align-items: $align;
  justify-content: $justify;
  flex-direction: $direction;
  flex-wrap: $wrap;
}

@mixin absoluteFull(){
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin maxWidth($breakpoint){
  @media screen and (max-width: $breakpoint){
    @content;
  }
}

@mixin minWidth($breakpoint){
  @media screen and (min-width: $breakpoint){
    @content;
  }
}

@mixin hideScroll(){
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar{
    display: none;
  }
}

@mixin textClamp($rows: 1, $size: 100%){
  display: -webkit-box;
  -webkit-line-clamp: $rows;
  -webkit-box-orient: vertical;  
  overflow: hidden;
  text-overflow: ellipsis;
  width: $size;
  max-width: $size;
  white-space: pre-wrap;
  word-break: break-word;
}

@mixin hoverEffect($itemClass,$contentClass, $transform: "true"){
  #{$contentClass}{
    position: absolute;
    opacity: 0;
    background-image: linear-gradient(to bottom,rgba($primary-color,0.9),rgba($secondary-color,0.9));
    @include absoluteFull();
    @include flexbox(center,center,column);
    transition: all 0.25s linear;
    font-size: 1.8rem;
    z-index: 2;
  }
  #{$itemClass}{
    position: relative;
    transition: all 0.25s linear;
    @if $transform == "true"{
      &:after{
        content: "";
        position: absolute;
        @include absoluteFull();
        @include bg($third-color);
        z-index: -5;
      }
    }
    &:hover{
      #{$contentClass}{
        opacity: 1;
      }
      @if $transform == "true"{
        transform: translate(-1rem,-1rem);
        &:after{
          transform: translate(1rem,1rem);
        }
      }
    }
  }
}

@mixin touchSlider($width: 80%, $gap: 1rem, $padding: 1rem){
  display: grid !important;
  justify-content: flex-start !important;
  grid-auto-columns:$width;
  grid-auto-flow: column;
  grid-template-columns: unset;
  grid-column-gap: $gap;
  overflow-x: auto;
  padding: $padding;
  scroll-snap-type: x mandatory;
  scroll-snap-stop: always;
  @include hideScroll();
  & > *{
    width: auto;
    scroll-snap-align: start;
  }
}

//using object optimize sass
// () -> map
@mixin data($config: ()){
  $config: extend(
    (
      color: red,
      backgroundColor: blue
    ),
    $config
  );
  color: map-get($config, color);
  background-color: map-get($config, backgroundColor);
}

@mixin flexbox2($config: ()){
  $config: extend(
    (
      display: flex,
      alignItems: flex-start,
      justifyContent: flex-start,
      flexDirection: row,
      flexWrap: nowrap
    ),
    $config
  );
  display: map-get($config, display);
  align-items: map-get($config, alignItems);
  justify-content: map-get($config, justifyContent);
  flex-direction: map-get($config, flexDirection);
  flex-wrap: map-get($config, flexWrap);
}